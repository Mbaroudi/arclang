name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --all-features --workspace
      
      - name: Run doc tests
        run: cargo test --doc --workspace

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: cargo tarpaulin --all-features --workspace --timeout 300 --out Xml
      
      - name: Upload to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml

  safety_analysis:
    name: Safety Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Build compiler
        run: cargo build --release
      
      - name: Run safety checks on examples
        run: |
          ./target/release/arclang safety examples/aerospace/flight_control_system.arc --standard DO178C --report
          ./target/release/arclang safety examples/automotive/adaptive_cruise_control.arc --standard ISO26262 --fmea --fta
          ./target/release/arclang safety examples/defense/mission_computer.arc --standard DO178C --report
      
      - name: Upload safety reports
        uses: actions/upload-artifact@v3
        with:
          name: safety-reports
          path: |
            **/*_safety_report.pdf
            **/*_fmea.csv
            **/*_fta.dot

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Build release binary
        run: cargo build --release --all-features
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: arclang-${{ runner.os }}
          path: target/release/arclang*

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: arclang-Linux
      
      - name: Make executable
        run: chmod +x arclang
      
      - name: Test aerospace example
        run: |
          ./arclang check examples/aerospace/flight_control_system.arc
          ./arclang build examples/aerospace/flight_control_system.arc --output build/aerospace
          ./arclang trace examples/aerospace/flight_control_system.arc --validate
      
      - name: Test automotive example
        run: |
          ./arclang check examples/automotive/adaptive_cruise_control.arc
          ./arclang build examples/automotive/adaptive_cruise_control.arc --output build/automotive
      
      - name: Test defense example
        run: |
          ./arclang check examples/defense/mission_computer.arc
          ./arclang build examples/defense/mission_computer.arc --output build/defense

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run benchmarks
        run: cargo bench --workspace
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmarks
          path: target/criterion/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run security audit
        run: |
          cargo install cargo-audit
          cargo audit
      
      - name: Check dependencies
        run: cargo tree --all-features
